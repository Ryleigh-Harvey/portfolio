# -*- coding: utf-8 -*-
"""Copy of DataGenerationProj.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TOwolhhb4AE0RiV1VvTJmfmSaQcrQqZV

# Data Generation Project
## Giana Grace, Natalie Dume, Ryleigh Harvey, Bella Ball, Zhizhong Liu
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from google.colab import drive
drive.mount('/content/drive')

df1 = pd.read_csv("/content/drive/My Drive/Colab Notebooks/Data Collection SpreadSheet.csv", nrows=20000)



df1.head()

df1["Target Distance cm"] = df1["Target Distance cm"] * 0.393701
df1.rename(columns={"Target Distance cm": "Target Distance cm"}, inplace=True)

df1.head()

df1["Total Distance Traveled cm"] = df1["Total Distance Traveled cm"].astype(str).str.replace("+", "", regex=False)

df1["Total Distance Traveled cm"] = df1["Total Distance Traveled cm"].astype(float)
df1["Total Distance Traveled cm"] = df1["Total Distance Traveled cm"] * 0.393701
df1.rename(columns={"Total Distance Traveled cm": "Total Distance Traveled cm"}, inplace=True)

df1.head()

df2 = pd.read_csv("/content/drive/My Drive/Colab Notebooks/Data Collection Activity - Sheet1.csv", nrows=20000)

df2.head()

df3 = pd.read_csv("/content/drive/My Drive/Colab Notebooks/widgets - Sheet1.csv", nrows=20000)

df3.head()

df4 = pd.read_csv("/content/drive/My Drive/Colab Notebooks/Dataset-2.csv", nrows=20000)

df4.head()

df4 = df4.drop(columns=df4.columns[5:])
df4.head(20)

df4.loc[10:13, "Material"]="V (Sticks and Rubber band)"

df4.loc[15:18, "Material"]="Stick, Paper, Rubber band"

df4.loc[19:21, "Material"]="Pencil and Rubber band"

df4.head(20)

df4.dropna(axis=0, how='any', subset=None, inplace=True)
df4.head(20)

print(list(df1.columns))
print(list(df2.columns))
print(list(df3.columns))
print(list(df4.columns))

"""# COLUMNS TO USE

##DF1
* Target Distance cm
* Angle of launch
* Rock Type
* Total Distance Traveled cm
* Trial Number (?????)

##DF2
* Object
* Distance (inch)
* Degree of Angle
* Distance from Target (inches)/Target Hit?

##DF3
* Item
* Launcher (?????)
* Degree of Angle
* Distance to Target
* Distance from Target

##DF4
* Material
* Channel of Movement
* Distance (in)
* Accuracy (in)

# Rename Columns

## COLUMN NAMES
* Launcher
* Object
* Degree of Angle
* Distance Traveled
* Distance from Target
* Accuracy
"""

## rename columns in datasets

df1.rename(columns = {'Target Distance cm':'Distance from Target'}, inplace = True)
df1.rename(columns = {'Total Distance Traveled cm':'Distance Traveled'}, inplace = True)
df1.rename(columns = {'Angle of launch ':'Degree of Angle'}, inplace = True)
df1.rename(columns = {'Rock Type':'Object'}, inplace = True)
df1.rename(columns = {'Trial Number (?????)':'Trial Number'}, inplace = True)

df2.rename(columns = {'Object':'Object'}, inplace = True)
df2.rename(columns = {'Distance (inch)':'Distance Traveled'}, inplace = True)
df2.rename(columns = {'Degree of Angle':'Degree of Angle'}, inplace = True)
df2.rename(columns = {'Distance from Target (inches)':'Distance from Target'}, inplace = True)

df3.rename(columns = {'Item':'Object'}, inplace = True)
df3.rename(columns = {'Launcher':'Launcher'}, inplace = True)
df3.rename(columns = {'Degree of Angle':'Degree of Angle'}, inplace = True)
df3.rename(columns = {'Distance Actual':'Distance Traveled'}, inplace = True)
df3.rename(columns = {'Distance From Target':'Distance from Target'}, inplace = True)

df4.rename(columns = {'Material':'Launcher'}, inplace = True)
df4.rename(columns = {'Channel of movement':'Object'}, inplace = True)
df4.rename(columns = {'Distance (in)':'Distance Traveled'}, inplace = True)
df4.rename(columns = {'Accuracy (in)':'Distance from Target'}, inplace = True)

df4.head()

merge_columns = ["Launcher", "Object", "Degree of Angle", "Distance Traveled", "Distance from Target"]

dfs = [df1, df2, df3, df4]
for df in dfs:
    for col in merge_columns:
        if col not in df.columns:
            df[col] = None

for df in [df1, df2, df3, df4]:
    df["Degree of Angle"] = df["Degree of Angle"].astype(float)

for df in [df1, df2, df3, df4]:
    df["Distance from Target"] = df["Distance from Target"].astype(float)

merged_df = pd.merge(df1, df2, how="outer", on=merge_columns)
merged_df = pd.merge(merged_df, df3, how="outer", on=merge_columns)
merged_df = pd.merge(merged_df, df4, how="outer", on=merge_columns)

print(merged_df)

merged_df = merged_df[merge_columns]


merged_df.loc[30:77, "Launcher"] = "Launcher1"
merged_df.loc[78:, "Launcher"] = "Launcher2"
merged_df.head()

import matplotlib.pyplot as plt

plt.bar(merged_df['Launcher'], merged_df['Distance Traveled'], color='skyblue')
#plt.hist(merged_df['Launcher'], bins=5, color='blue', edgecolor='black',alpha=0.7)
plt.xlabel('Launcher')
plt.ylabel('Distance Traveled')
plt.title('Launcher vs Distance Traveled')
plt.xticks(rotation=90)
plt.show()

plt.bar(merged_df['Object'].astype(str), merged_df['Distance Traveled'], color='skyblue')
#plt.hist(merged_df['Launcher'], bins=5, color='blue', edgecolor='black',alpha=0.7)
plt.xlabel('Object')
plt.ylabel('Distance Traveled')
plt.title('Object vs Distance Traveled')
plt.xticks(rotation=90)
plt.show()

merged_df['Launcher-Object'] = merged_df['Launcher'].astype(str) + ' - ' + merged_df['Object'].astype(str)

plt.figure(figsize=(8, 6))
plt.bar(merged_df['Launcher-Object'], merged_df['Distance Traveled'], color='skyblue')


plt.xlabel('Launcher & Object')
plt.ylabel('Distance Traveled')
plt.title('Launcher & Object vs Distance Traveled')
plt.xticks(rotation=90)
plt.show()

merged_df['Accuracy'] = 1 / (1 + abs(merged_df['Distance Traveled'] - merged_df['Distance from Target']))

plt.figure(figsize=(8, 6))
plt.bar(merged_df['Launcher'], merged_df['Accuracy'], color='skyblue')


plt.xlabel('Launcher')
plt.ylabel('Accuracy')
plt.title('Launcher vs Accuracy')
plt.xticks(rotation=90)
plt.show()